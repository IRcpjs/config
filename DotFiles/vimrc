" setting variable {{{
let s:isWin = has('win32')
if s:isWin
    let $VIMDIR=expand("$HOME/vimfiles")
else
    let $VIMDIR=expand("$HOME/.vim")
endif
" }}}
" plugins {{{
if empty(glob("$VIMDIR/autoload/plug.vim"))
    silent !curl -fLo $VIMDIR/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin(expand("$VIMDIR/bundle"))
Plug 'vim-jp/vimdoc-ja'
Plug 'itchyny/lightline.vim'
Plug 'cocopon/vaffle.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'bronson/vim-trailing-whitespace'
Plug 'mattn/sonictemplate-vim'
Plug 'thinca/vim-quickrun', {'on': 'QuickRun'}
Plug 'PProvost/vim-ps1'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete-neosnippet.vim'
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'tyru/open-browser.vim'
Plug 'previm/previm', {'for': 'markdown'}
Plug 'elzr/vim-json', {'for': 'json'}
call plug#end()
function! s:isPlugin(name)
    if !exists("g:plug")| return 0 | endif
    return has_key(g:plug, a:name) ? isdirectory(g:plug[a:name].dir) : 0
endfunction
" }}}
" plugins setting {{{
command! -nargs=0 Fq call fzf#run({
\   'source': 'ghq list --full-path',
\   'sink': 'Vaffle',
\})
let g:previm_enable_realtime=1
let g:sonictemplate_vim_template_dir=[expand("$VIMDIR/templates")]
let g:vaffle_auto_cd = 1
let g:vaffle_open_selected_split_position = 'rightbelow'
let g:vaffle_open_selected_vsplit_position = 'rightbelow'
let g:neosnippet#snippets_directory=
            \   expand("$VIMDIR/bundle/neosnippet-snippets/snippets,"
            \   .      "$VIMDIR/snippets")
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
if executable('pyls')
    augroup lspPyls
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
                    \ 'name': 'pyls',
                    \ 'cmd': {server_info->['pyls']},
                    \ 'whitelist': ['python'],
                    \})
    augroup END
endif
if s:isPlugin("asyncomplete.vim") && s:isPlugin("asyncomplete-neosnippet.vim")
    call asyncomplete#register_source(
    \   asyncomplete#sources#neosnippet#get_source_options({
    \   'name': 'neosnippet',
    \   'whitelist': ['*'],
    \   'completor': function('asyncomplete#sources#neosnippet#completor'),
    \}))
endif
" }}}
" colorscheme {{{
syntax enable
if empty(glob("$VIMDIR/colors/apprentice.vim"))
    silent !curl -fLo $VIMDIR/colors/apprentice.vim --create-dirs
                \   https://raw.githubusercontent.com/romainl/Apprentice/master/colors/apprentice.vim
endif
colorscheme apprentice
" }}}
" native setting {{{
set number
set cursorline
set laststatus=2
set showcmd
set noswapfile
set nobackup
set viminfo=
set noundofile
set hidden
set confirm
set wildmenu
set wildmode=longest,full
set autoindent
set smartindent
set expandtab
set tabstop=4 softtabstop=4 shiftwidth=4 " default ts sts sw
augroup fileTypeIndent
    autocmd!
    autocmd FileType ruby setlocal ts=2 sts=2 sw=2
augroup END
set hlsearch
set ignorecase
set smartcase
set nowrapscan
set incsearch
set encoding=utf-8
scriptencoding utf-8
set fileencodings=utf-8,iso-2022-jp,enc-jp,sjis
set fileformats=unix,dos,mac
set backspace=indent,eol,start
set helplang=ja,en
set matchtime=1
set pumheight=5
set title
set showmatch
if s:isWin
    set shell=powershell.exe
endif
" }}}
" keymappings {{{
nnoremap sh <C-w>h
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap Y y$
nnoremap + <C-a>
nnoremap - <C-x>
inoremap jj <esc>
inoremap „Å£j <esc>
inoremap <silent><C-a> <esc>A
nnoremap <F5>  :QuickRun<CR>
nnoremap <F4>  :QuickRun -input =@+<CR>
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \     "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
nnoremap <silent><Space>f :Files<CR>
nnoremap <silent><Space>g :GFiles<CR>
nmap ss <Plug>(vaffle-open-selected-split)
nmap sv <Plug>(vaffle-open-selected-vsplit)
" }}}
" vim: foldmethod=marker
" vim: foldcolumn=3
" vim: foldlevel=0
